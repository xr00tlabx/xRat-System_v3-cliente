// =============================================================================
// MainController Implementation - Implementa√ß√£o do Controlador Principal
// =============================================================================
// Projeto: Main C++ Application
// Arquivo: controllers/MainController.cpp
// Descri√ß√£o: Implementa√ß√£o da l√≥gica de neg√≥cio
// Autor: Desenvolvedor
// Data: 11/08/2025
// =============================================================================

#include "../../include/controllers/MainController.h"
#include "../../include/forms/MainForm.h"
#include "../../include/utils/AppUtils.h"
#include <sstream>
#include <fstream>

// =============================================================================
// VARI√ÅVEIS EST√ÅTICAS
// =============================================================================

std::unique_ptr<ApplicationData> MainController::appData = nullptr;
MainForm *MainController::mainForm = nullptr;
HINSTANCE MainController::hInstance = nullptr;

// =============================================================================
// IMPLEMENTA√á√ÉO DOS M√âTODOS DE INICIALIZA√á√ÉO
// =============================================================================

bool MainController::Initialize(HINSTANCE hInst)
{
    try
    {
        hInstance = hInst;
        appData.reset(new ApplicationData());

        SetupApplicationData();

        AppUtils::DebugPrint("MainController::Initialize - Controller inicializado com sucesso\n");
        AppUtils::WriteLog("Controller inicializado", "INFO");

        return true;
    }
    catch (...)
    {
        AppUtils::ShowErrorMessage("Erro ao inicializar o controller da aplica√ß√£o!");
        return false;
    }
}

void MainController::Shutdown()
{
    if (appData)
    {
        LogEvent("Aplica√ß√£o sendo finalizada", "INFO");
        appData.reset();
    }

    mainForm = nullptr;
    hInstance = nullptr;

    AppUtils::DebugPrint("MainController::Shutdown - Controller finalizado\n");
}

bool MainController::IsInitialized()
{
    return appData != nullptr && appData->isInitialized;
}

// =============================================================================
// IMPLEMENTA√á√ÉO DOS M√âTODOS DE CONTROLE DA APLICA√á√ÉO
// =============================================================================

bool MainController::StartApplication(int nCmdShow)
{
    if (!appData)
    {
        AppUtils::ShowErrorMessage("Controller n√£o foi inicializado!");
        return false;
    }

    // Inicializar o formul√°rio principal
    if (!MainForm::Initialize(hInstance, nullptr))
    {
        AppUtils::ShowErrorMessage("Erro ao inicializar o formul√°rio principal!");
        return false;
    }

    // Criar a janela principal
    if (!MainForm::CreateMainWindow(nCmdShow))
    {
        AppUtils::ShowErrorMessage("Erro ao criar a janela principal!");
        return false;
    }

    appData->isInitialized = true;
    LogEvent("Aplica√ß√£o iniciada com sucesso", "INFO");

    // Exibir mensagem de boas-vindas
    ShowWelcomeMessage();

    return true;
}

int MainController::RunMessageLoop()
{
    if (!IsInitialized())
    {
        return 1;
    }

    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return (int)msg.wParam;
}

bool MainController::RequestShutdown()
{
    return AppUtils::ConfirmAction(
        "Tem certeza que deseja sair da aplica√ß√£o?",
        "Confirmar Sa√≠da");
}

// =============================================================================
// IMPLEMENTA√á√ÉO DOS HANDLERS DE EVENTOS
// =============================================================================

void MainController::OnButtonHelloClicked()
{
    if (!appData)
        return;

    IncrementClickCount();

    std::stringstream ss;
    ss << "üéØ " << appData->GetAppName() << " - Informa√ß√µes Detalhadas\n\n"
       << "üìã Informa√ß√µes da Aplica√ß√£o:\n"
       << "‚Ä¢ Nome: " << appData->GetAppName() << "\n"
       << "‚Ä¢ Vers√£o: " << appData->GetAppVersion() << "\n"
       << "‚Ä¢ Autor: " << appData->GetAppAuthor() << "\n"
       << "‚Ä¢ Descri√ß√£o: " << appData->GetAppDescription() << "\n"
       << "‚Ä¢ Client ID: " << appData->GetClientId() << "\n"
       << "‚Ä¢ Data de Build: " << appData->buildDate << "\n"
       << "‚Ä¢ Hora de Build: " << appData->buildTime << "\n\n"
       << "üõ†Ô∏è Informa√ß√µes T√©cnicas:\n"
       << "‚Ä¢ Linguagem: C++ (ISO C++11)\n"
       << "‚Ä¢ API: Win32 Native\n"
       << "‚Ä¢ Arquitetura: x64\n"
       << "‚Ä¢ Paradigma: Orientado a Objetos\n"
       << "‚Ä¢ Estrutura: MVC (Model-View-Controller)\n\n"
       << "üìä Estat√≠sticas de Uso:\n"
       << "‚Ä¢ Cliques no bot√£o: " << appData->clickCount << "\n"
       << "‚Ä¢ Modo Debug: " << (appData->GetDebugMode() ? "Ativado" : "Desativado") << "\n"
       << "‚Ä¢ Data/Hora atual: " << AppUtils::GetCurrentDateTime() << "\n\n"
       << "‚ú® Recursos Implementados:\n"
       << "‚Ä¢ Interface gr√°fica modular\n"
       << "‚Ä¢ Arquitetura MVC\n"
       << "‚Ä¢ Sistema de logging\n"
       << "‚Ä¢ Gerenciamento de recursos\n"
       << "‚Ä¢ Utilit√°rios diversos";

    AppUtils::ShowInfoMessage(ss.str().c_str(), "Informa√ß√µes do Sistema");


    // Atualizar status no formul√°rio
    MainForm::UpdateStatusText("Informa√ß√µes exibidas com sucesso!");

    LogEvent("Informa√ß√µes da aplica√ß√£o exibidas", "INFO");
}

void MainController::OnButtonAboutClicked()
{
    if (!appData)
        return;

    std::stringstream ss;
    ss << "‚ÑπÔ∏è Sobre o " << appData->GetAppName() << "\n\n"
       << "Esta √© uma aplica√ß√£o de demonstra√ß√£o desenvolvida em C++ "
       << "utilizando a API nativa do Windows (Win32).\n\n"
       << "üèóÔ∏è Arquitetura:\n"
       << "A aplica√ß√£o segue o padr√£o MVC (Model-View-Controller), "
       << "separando a l√≥gica de neg√≥cio da interface do usu√°rio.\n\n"
       << "üìÅ Estrutura de M√≥dulos:\n"
       << "‚Ä¢ Forms: Respons√°vel pela interface\n"
       << "‚Ä¢ Controllers: L√≥gica de neg√≥cio\n"
       << "‚Ä¢ Utils: Fun√ß√µes utilit√°rias\n"
       << "‚Ä¢ Config: Sistema de configura√ß√£o centralizada\n\n"
       << "üéØ Objetivo:\n"
       << "Demonstrar boas pr√°ticas de desenvolvimento C++ "
       << "com interface gr√°fica nativa do Windows.\n\n"
       << "Desenvolvido por: " << appData->GetAppAuthor() << "\n"
       << "Vers√£o: " << appData->GetAppVersion();

    AppUtils::ShowInfoMessage(ss.str().c_str(), "Sobre a Aplica√ß√£o");

    LogEvent("Informa√ß√µes 'Sobre' exibidas", "INFO");
}

void MainController::OnButtonConfigClicked()
{
    if (!appData)
        return;

    // Toggle do modo debug usando o sistema de configura√ß√£o
    appData->SetDebugMode(!appData->GetDebugMode());

    std::stringstream ss;
    ss << "‚öôÔ∏è Configura√ß√µes da Aplica√ß√£o\n\n"
       << "=== CONFIGURA√á√ïES GERAIS ===\n"
       << "‚Ä¢ Client ID: " << appData->GetClientId() << "\n"
       << "‚Ä¢ Modo Debug: " << (appData->GetDebugMode() ? "‚úÖ Ativado" : "‚ùå Desativado") << "\n"
       << "‚Ä¢ Auto Save: " << (Config::GetBool("autoSave", true) ? "‚úÖ Ativado" : "‚ùå Desativado") << "\n"
       << "‚Ä¢ Log Level: " << Config::GetString("logLevel", "INFO") << "\n\n"
       << "=== CONFIGURA√á√ïES DE JANELA ===\n"
       << "‚Ä¢ Largura: " << Config::GetInt("windowWidth", 600) << "px\n"
       << "‚Ä¢ Altura: " << Config::GetInt("windowHeight", 400) << "px\n"
       << "‚Ä¢ Centralizada: " << (Config::GetBool("windowCentered", true) ? "‚úÖ Sim" : "‚ùå N√£o") << "\n\n"
       << "üíæ Arquivo de Configura√ß√£o:\n" << Config::GetConfigFilePath() << "\n\n"
       << "O modo debug foi " << (appData->GetDebugMode() ? "ativado" : "desativado") << ".\n"
       << "As configura√ß√µes s√£o salvas automaticamente.";

    AppUtils::ShowInfoMessage(ss.str().c_str(), "Configura√ß√µes");

    MainForm::UpdateStatusText(appData->GetDebugMode() ? "Modo Debug ATIVADO" : "Modo Debug DESATIVADO");

    LogEvent("Modo debug alterado para: " + std::string(appData->GetDebugMode() ? "ON" : "OFF"), "CONFIG");
}

void MainController::OnButtonExitClicked()
{
    if (RequestShutdown())
    {
        PostQuitMessage(0);
    }
}

bool MainController::OnWindowClosing()
{
    return RequestShutdown();
}

// =============================================================================
// IMPLEMENTA√á√ÉO DOS M√âTODOS DE DADOS DA APLICA√á√ÉO
// =============================================================================

ApplicationData *MainController::GetApplicationData()
{
    return appData.get();
}

std::string MainController::GetApplicationName()
{
    return appData ? appData->GetAppName() : "Unknown";
}

std::string MainController::GetApplicationVersion()
{
    return appData ? appData->GetAppVersion() : "0.0.0";
}

std::string MainController::GetApplicationInfo()
{
    if (!appData)
        return "Aplica√ß√£o n√£o inicializada";

    std::stringstream ss;
    ss << appData->GetAppName() << " v" << appData->GetAppVersion()
       << " por " << appData->GetAppAuthor();

    return ss.str();
}

// =============================================================================
// IMPLEMENTA√á√ÉO DOS M√âTODOS DE CONFIGURA√á√ÉO
// =============================================================================

void MainController::SetDebugMode(bool enabled)
{
    if (appData)
    {
        appData->SetDebugMode(enabled);
        AppUtils::WriteLog("Modo debug alterado para: " + std::string(enabled ? "ON" : "OFF"), "CONFIG");
    }
}

bool MainController::IsDebugMode()
{
    return appData ? appData->GetDebugMode() : false;
}

int MainController::IncrementClickCount()
{
    if (appData)
    {
        appData->clickCount++;

        if (appData->GetDebugMode())
        {
            AppUtils::DebugPrint(("Click count: " + std::to_string(appData->clickCount) + "\n").c_str());
        }

        return appData->clickCount;
    }
    return 0;
}

void MainController::ResetClickCount()
{
    if (appData)
    {
        appData->clickCount = 0;
        LogEvent("Contador de cliques resetado", "INFO");
    }
}

// =============================================================================
// IMPLEMENTA√á√ÉO DOS M√âTODOS DE LOGGING E DEBUG
// =============================================================================

void MainController::LogEvent(const std::string &event, const std::string &level)
{
    AppUtils::WriteLog(event, level);

    if (appData && appData->GetDebugMode())
    {
        std::string debugMsg = "[" + level + "] " + event + "\n";
        AppUtils::DebugPrint(debugMsg.c_str());
    }
}

void MainController::ShowDebugInfo()
{
    if (!appData)
        return;

    std::stringstream ss;
    ss << "üêõ Informa√ß√µes de Debug\n\n"
       << "Estado da Aplica√ß√£o:\n"
       << "‚Ä¢ Inicializada: " << (appData->isInitialized ? "Sim" : "N√£o") << "\n"
       << "‚Ä¢ Modo Debug: " << (appData->GetDebugMode() ? "Ativo" : "Inativo") << "\n"
       << "‚Ä¢ Contador de Cliques: " << appData->clickCount << "\n\n"
       << "Informa√ß√µes do Sistema:\n"
       << FormatSystemInfo() << "\n\n"
       << "Estat√≠sticas:\n"
       << FormatApplicationStats();

    AppUtils::ShowInfoMessage(ss.str().c_str(), "Debug Info");
}

bool MainController::SaveApplicationState(const std::string &filename)
{
    // Implementa√ß√£o b√°sica de save (pode ser expandida)
    std::string saveFile = filename.empty() ? "app_state.txt" : filename;
    saveFile = AppUtils::CombinePath(AppUtils::GetAppDirectory(), saveFile);

    try
    {
        std::ofstream file(saveFile);
        if (file.is_open())
        {
            file << "# Estado da Aplica√ß√£o\n";
            file << "Nome=" << appData->GetAppName() << "\n";
            file << "Versao=" << appData->GetAppVersion() << "\n";
            file << "ClickCount=" << appData->clickCount << "\n";
            file << "DebugMode=" << (appData->GetDebugMode() ? "1" : "0") << "\n";
            file << "SaveTime=" << AppUtils::GetCurrentDateTime() << "\n";
            file.close();

            LogEvent("Estado da aplica√ß√£o salvo em: " + saveFile, "INFO");
            return true;
        }
    }
    catch (...)
    {
        AppUtils::ShowErrorMessage("Erro ao salvar estado da aplica√ß√£o!");
    }

    return false;
}

bool MainController::LoadApplicationState(const std::string &filename)
{
    // Implementa√ß√£o b√°sica de load (pode ser expandida)
    std::string loadFile = filename.empty() ? "app_state.txt" : filename;
    loadFile = AppUtils::CombinePath(AppUtils::GetAppDirectory(), loadFile);

    if (!AppUtils::FileExists(loadFile))
    {
        return false;
    }

    try
    {
        std::ifstream file(loadFile);
        if (file.is_open())
        {
            std::string line;
            while (std::getline(file, line))
            {
                if (line.find("ClickCount=") == 0)
                {
                    appData->clickCount = std::stoi(line.substr(11));
                }
                else if (line.find("DebugMode=") == 0)
                {
                    appData->SetDebugMode(line.substr(10) == "1");
                }
            }
            file.close();

            LogEvent("Estado da aplica√ß√£o carregado de: " + loadFile, "INFO");
            return true;
        }
    }
    catch (...)
    {
        AppUtils::ShowErrorMessage("Erro ao carregar estado da aplica√ß√£o!");
    }

    return false;
}

// =============================================================================
// IMPLEMENTA√á√ÉO DOS M√âTODOS PRIVADOS
// =============================================================================

void MainController::SetupApplicationData()
{
    if (!appData)
        return;

    // Os dados j√° s√£o inicializados no construtor de ApplicationData
    // Aqui podemos fazer configura√ß√µes adicionais se necess√°rio

    // Tentar carregar estado anterior
    LoadApplicationState();

    AppUtils::DebugPrint("MainController::SetupApplicationData - Dados configurados\n");
}

bool MainController::ValidateApplicationState()
{
    if (!appData)
        return false;

    // Valida√ß√µes b√°sicas
    bool isValid = !appData->GetAppName().empty() &&
                   !appData->GetAppVersion().empty() &&
                   !appData->GetAppAuthor().empty();

    if (!isValid)
    {
        LogEvent("Estado da aplica√ß√£o inv√°lido detectado", "WARNING");
    }

    return isValid;
}

void MainController::ProcessSpecialEvent(const std::string &eventType, const std::string &eventData)
{
    LogEvent("Evento especial processado: " + eventType + " - " + eventData, "DEBUG");

    // Implementar l√≥gica espec√≠fica para eventos especiais conforme necess√°rio
}

std::string MainController::FormatSystemInfo()
{
    std::stringstream ss;

    // Informa√ß√µes b√°sicas do sistema
    OSVERSIONINFO osvi;
    ZeroMemory(&osvi, sizeof(OSVERSIONINFO));
    osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);

    ss << "‚Ä¢ Sistema Operacional: Windows\n";
    ss << "‚Ä¢ Arquitetura: x64\n";
    ss << "‚Ä¢ Data/Hora: " << AppUtils::GetCurrentDateTime();

    return ss.str();
}

std::string MainController::FormatApplicationStats()
{
    if (!appData)
        return "Dados n√£o dispon√≠veis";

    std::stringstream ss;
    ss << "‚Ä¢ Total de cliques: " << appData->clickCount << "\n";
    ss << "‚Ä¢ Tempo de execu√ß√£o: Desde o in√≠cio\n";
    ss << "‚Ä¢ Modo atual: " << (appData->GetDebugMode() ? "Debug" : "Release");

    return ss.str();
}

void MainController::ShowWelcomeMessage()
{
    if (!appData)
        return;

    std::stringstream ss;
    ss << "üéâ Bem-vindo ao " << appData->GetAppName() << "!\n\n"
       << "üìù Informa√ß√µes:\n"
       << "‚Ä¢ Vers√£o: " << appData->GetAppVersion() << "\n"
       << "‚Ä¢ Desenvolvido por: " << appData->GetAppAuthor() << "\n"
       << "‚Ä¢ Client ID: " << appData->GetClientId() << "\n"
       << "‚Ä¢ Data: " << AppUtils::GetCurrentDate() << "\n"
       << "‚Ä¢ Hora: " << AppUtils::GetCurrentTime() << "\n\n"
       << "Arquitetura MVC:\n"
       << "Esta aplica√ß√£o utiliza o padr√£o Model-View-Controller "
       << "para separar responsabilidades e facilitar manuten√ß√£o.\n\n"
       << "Como usar:\n"
       << "‚Ä¢ Clique em 'Mostrar Informa√ß√µes' para ver detalhes\n"
       << "‚Ä¢ Use 'Sobre' para informa√ß√µes da aplica√ß√£o\n"
       << "‚Ä¢ 'Configura√ß√µes' para alterar o modo debug\n"
       << "‚Ä¢ 'Sair' para fechar a aplica√ß√£o";

    AppUtils::ShowInfoMessage(ss.str().c_str(), "Aplica√ß√£o Iniciada");

    LogEvent("Mensagem de boas-vindas exibida", "INFO");
}
